#!/usr/bin/env python3
'''
Wrapper script over blender's command-line rendering.
'''

import os
import sys
import shlex
import subprocess


SCRIPT = os.path.basename(__file__)


def reportcmd(cmd):
    print(SCRIPT + ': ' + cmd)


def subexec(cmd, wd=None):
    '''Execute command as sub-process, raise exception upon failure'''
    reportcmd(cmd)
    pipes = subprocess.Popen(shlex.split(cmd),
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE,
                             cwd=wd,
                             shell=False,
                             env=os.environ.copy())
    std_out, std_err = pipes.communicate()
    if len(std_err) > 0:
        out = std_err
    else:
        out = std_out
    if pipes.returncode != 0:
        raise RuntimeError(out)
    return out.decode('UTF-8')


def run_blender_render(blend_file, render_name, render_format='PNG'):
    engine = 'CYCLES'
    render_output = '//' + render_name + '#'
    use_extension = 1
    render_frame = 1
    fmt = 'blender --background {0} --engine {1} --render-output {2}' + \
        ' --render-format {3} --use-extension {4} --render-frame {5}'
    cmd = fmt.format(blend_file, engine, render_output, render_format,
                     use_extension, render_frame)
    out = subexec(cmd)
    return out


def blend_name(blend_file):
    return os.path.splitext(os.path.basename(blend_file))[0]


def main():
    for blend in sys.argv[1:]:
        name = blend_name(blend)
        run_blender_render(blend, name)


if __name__ == '__main__':
    main()
