#!/usr/bin/env python3


import sys
import os
import getopt
import shlex
import subprocess
import distutils.spawn
import colorama


WHITE = colorama.Fore.WHITE
GREEN = colorama.Fore.GREEN
YELLOW = colorama.Fore.YELLOW
BLUE = colorama.Fore.BLUE
CYAN = colorama.Fore.CYAN
MAGENTA = colorama.Fore.MAGENTA
RED = colorama.Fore.RED
DIM = colorama.Style.DIM
BRIGHT = colorama.Style.BRIGHT
RESET_ALL = colorama.Style.RESET_ALL
NLINES_DEFAULT = 24


def msg(txt: str) -> None:
    name = os.path.basename(__file__)
    print(name + ': ' + txt)


def die(txt: str) -> None:
    msg(txt)
    sys.exit(-1)


def locate_bin(name: str) -> str:
    xbin = distutils.spawn.find_executable(name)
    if not xbin:
        die('failed to find ' + name)
    return str(xbin).strip()


def subexec(cmd, work_dir=None) -> str:
    '''Execute command as sub-process, die upon failure'''
    pipes = subprocess.Popen(shlex.split(cmd),
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE,
                             cwd=work_dir,
                             shell=False,
                             env=os.environ.copy())
    std_out, std_err = pipes.communicate()
    if std_err:
        out = std_err
    else:
        out = std_out
    if pipes.returncode != 0:
        die('failed: ' + cmd)
    return out.decode('UTF-8')


def git_log_format(work_dir: str, ref_name: str, nlines: int) -> str:
    '''Calls git-log-format without colors and with | as seperator'''
    cmd = locate_bin('git')
    cmd = cmd + ' --no-pager log --abbrev-commit --decorate --date=short'
    cmd = cmd + ' -n{} '.format(nlines)
    cmd = cmd + ' --format=tformat:\'%h|%an|%ad|%d|%s\' '
    cmd = cmd + ref_name
    return subexec(cmd, work_dir)


def parse_git_log(lines: str) -> list:
    gll_dat = []
    for ln in lines.split('\n'):
        t = tuple(ln.split('|', 5))
        if len(t) != 5:
            continue
        gll_dat.append(t)
    return gll_dat


def print_gll_line(sha: str, author: str, date: str,
                   tag_token: str, commit_msg: str) -> None:
    hsep = RED + BRIGHT + '|' + RESET_ALL
    sha = GREEN + sha
    author = YELLOW + '{:<20s}'.format(author)
    date = BLUE + date
    tag_branch = MAGENTA + tag_token
    commit_msg = WHITE + commit_msg
    if tag_token:
        print('{} {} {} {} {} {}'.format(sha, author, date, hsep,
                                         tag_branch, RESET_ALL))
    print('{} {} {} {} {} {}'.format(sha, author, date, hsep,
                                     commit_msg, RESET_ALL))


def print_gll(gll_dat: list) -> None:
    for dat in gll_dat:
        ent = [field.strip() for field in dat]
        print_gll_line(ent[0], ent[1], ent[2], ent[3], ent[4])


def usage() -> None:
    die("usage: {} [-n NLINES] [<git-path>]".format(sys.argv[0]))


def parse_args() -> tuple:
    nlines = NLINES_DEFAULT
    work_dir = os.getcwd()
    ref_name = ''
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hn:", ["help", "nlines="])
    except getopt.GetoptError as err:
        print(err)
        usage(1)
    for opt, arg in opts:
        if opt in ("-n", "--nlines"):
            nlines = int(arg)
        else:
            usage()
    if len(args) > 1:
        usage()
    if args:
        ref_name = args[0]
        if os.path.isdir(ref_name):
            ref_name = work_dir = os.path.realpath(ref_name)
        elif os.path.isfile(ref_name):
            ref_name = os.path.realpath(ref_name)
            work_dir = os.path.dirname(ref_name)

    return (work_dir, ref_name, nlines)


def main() -> None:
    colorama.init()
    (work_dir, ref_name, nlines) = parse_args()
    git_out = git_log_format(work_dir, ref_name, nlines)
    gll_dat = parse_git_log(git_out)
    print_gll(gll_dat)
    sys.exit(0)


if __name__ == '__main__':
    main()
